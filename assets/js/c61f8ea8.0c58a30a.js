"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[446],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),h=n,f=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return r?a.createElement(f,i(i({ref:t},u),{},{components:r})):a.createElement(f,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3532:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:2},i="Folders Structure",l={unversionedId:"the-graph/folders-structure",id:"the-graph/folders-structure",title:"Folders Structure",description:"We have two important files in the root folder of the project:",source:"@site/docs/the-graph/folders-structure.mdx",sourceDirName:"the-graph",slug:"/the-graph/folders-structure",permalink:"/docs/the-graph/folders-structure",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"The Graph",permalink:"/docs/category/the-graph"},next:{title:"Contract",permalink:"/docs/category/contract"}},s={},c=[{value:"ABI",id:"abi",level:2},{value:"Build",id:"build",level:2},{value:"Generated",id:"generated",level:2},{value:"SRC",id:"src",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"folders-structure"},"Folders Structure"),(0,n.kt)("p",null,"We have two important files in the root folder of the project:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"schema.graphql: here the entities of the subgraph are defined with their attributes and types")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"subgraph.yaml: here are all the contract and subgraph settings, such as the path to the schema file defined and the data sources: contract address, network information, ABI, events, entities and the mapping file used to create the wasm executable"))),(0,n.kt)("h2",{id:"abi"},"ABI"),(0,n.kt)("p",null,"Here we keep the ABI (Application Binary Interface) file of the contract, the ABI defines the structures and methods defined in the contract that the subgraph can access."),(0,n.kt)("h2",{id:"build"},"Build"),(0,n.kt)("p",null,"Here are the subgraph build files, composed of a folder with information about the contract's ABI, an executable and the files that defines the schema (schema.graphql) and the subgraph informations (subgraph.yaml):"),(0,n.kt)("h2",{id:"generated"},"Generated"),(0,n.kt)("p",null,'Before deploying the subgraph, you must run the "yarn codegen" command which will generate an AssemblyScript class for the contract ABI defined in subgraph.yaml. Two files are generated:'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Ribon.ts: this file allows the methods of the contract to be read and called and generates a class for each contract event to allow easy access to the parameters, the block and the transaction that issued the event.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"schema.ts: A class is generated for each entity and its read and write methods."))),(0,n.kt)("h2",{id:"src"},"SRC"),(0,n.kt)("p",null,"Here we keep the subgraph mapping file, responsible for transforming Ethereum data into entities defined in the schema. We create a function for each event handler defined in subgraph.yaml, this is where the entity data is actually populated by calling its read and write methods."))}p.isMDXComponent=!0}}]);