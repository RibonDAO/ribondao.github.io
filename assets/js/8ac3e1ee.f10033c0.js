"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[255],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return t?o.createElement(h,s(s({ref:n},p),{},{components:t})):o.createElement(h,s({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const i={sidebar_position:5},s="Styled Components",a={unversionedId:"interface/styled-components",id:"interface/styled-components",title:"Styled Components",description:"Global Styles",source:"@site/docs/interface/styled-components.mdx",sourceDirName:"interface",slug:"/interface/styled-components",permalink:"/docs/docs/interface/styled-components",draft:!1,editUrl:"https://github.com/RibonDAO/docs/docs/interface/styled-components.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Components and Pages",permalink:"/docs/docs/interface/how-to-test/components-and-pages"},next:{title:"Api Requests",permalink:"/docs/docs/category/api-requests"}},l={},c=[{value:"Global Styles",id:"global-styles",level:2},{value:"Components",id:"components",level:2},{value:"Atomics",id:"atomics",level:3},{value:"Moleculars",id:"moleculars",level:3}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"styled-components"},"Styled Components"),(0,r.kt)("h2",{id:"global-styles"},"Global Styles"),(0,r.kt)("p",null,"We use styled-components to style all of our components. For that, we have a styles folder,\nin the root of our project, to define the global styles of our application."),(0,r.kt)("p",null,"The first and second files we have here are globalStyle.ts and normalize.ts. That define the main styles\nfor our pages (#root, html, ...) and also for our atomic elements, such as button and input."),(0,r.kt)("p",null,"Another very important file is the theme.ts, in which we define variables for the colors of our application; and also for the fonts\nand breakpoints to use media-queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/styles/theme.ts"',title:'"src/styles/theme.ts"'},'const theme: ThemeType = {\n  grid: {},\n  border: {},\n  font: {\n    family: "Lato",\n    light: 300,\n    normal: 400,\n    bold: 600,\n    sizes: {},\n  },\n  colors: {\n    ribonBlue: "#00CDB4",\n    ribonBlack: "#185669",\n    darkGray: "#82AABE",\n    lightGray: "#D9E5EB",\n    gray: "#C4C4C4",\n    bgGray: "#FBFBFD",\n    lgRed: "#EF5350",\n    eaBlue: "#00B5BF",\n    phcYellow: "#FFB300",\n    sciGreen: "#6DC100",\n    ribonWhite: "#FFFFFF",\n    phcYellow2: "#FF8F00",\n    ribonShadow: "rgba(24, 86, 105, 0.15)",\n    modalBackground: "rgba(24, 86, 105, 0.6)",\n  },\n  spacings: {},\n  breakpoints: {\n    mobile: "0px",\n    mobileMedium: "374px",\n    pad: "600px",\n    desktop: "1024px",\n  },\n};\n')),(0,r.kt)("p",null,"Finally, we have the typography.ts file, that defines the size of the text elements in our\napplication. If you want to print a text with font-size = 14, you should use a h4, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/styles/typography.ts"',title:'"src/styles/typography.ts"'},'const typography = css`\n  body {\n    font-family: "Lato", sans-serif;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  p,\n  span {\n    color: #185669;\n  }\n\n  h1 {\n    font-size: 24px;\n    line-height: 1.6;\n  }\n\n  h2 {\n    font-size: 20px;\n    line-height: 1.6;\n  }\n\n  h3 {\n    font-size: 16px;\n    line-height: 1.6;\n  }\n\n  h4 {\n    font-size: 14px;\n    line-height: 1;\n  }\n\n  h5 {\n    font-size: 12px;\n    line-height: 1.6;\n  }\n\n  p {\n    font-size: 16px;\n    line-height: 1.7;\n  }\n\n  span {\n    font-size: 12px;\n    line-height: 1;\n  }\n`;\n')),(0,r.kt)("h2",{id:"components"},"Components"),(0,r.kt)("h3",{id:"atomics"},"Atomics"),(0,r.kt)("p",null,"In our components folder, we have two other important folders. The first one in the atomics folder, in which\nwe keep the atomic components, like buttons, inputs, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Example - src/components/atomics/Divider"',title:'"Example',"-":!0,'src/components/atomics/Divider"':!0},'export type Props = {\n  text?: string,\n  color?: string,\n  textColor?: string,\n  width?: string,\n  margin?: string,\n};\n\nfunction Divider({\n  text,\n  color = ribonWhite,\n  textColor = ribonWhite,\n  width = "100%",\n  margin = "0px",\n}: Props): JSX.Element {\n  return (\n    <S.Container>\n      <S.Divider\n        textColor={textColor}\n        color={color}\n        width={width}\n        margin={margin}\n        className="separator"\n      >\n        {text}\n      </S.Divider>\n    </S.Container>\n  );\n}\n')),(0,r.kt)("h3",{id:"moleculars"},"Moleculars"),(0,r.kt)("p",null,"The second one in the molecules folder, in which we\nkeep the molecules, like the header, the footer, the main content, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Example - src/components/atomics/Divider"',title:'"Example',"-":!0,'src/components/atomics/Divider"':!0},"export type Props = {\n  image: string,\n  imageAlt?: string,\n};\n\nfunction CardRoundImage({ image, imageAlt }: Props): JSX.Element {\n  return (\n    <S.Container>\n      <S.CenterImage src={image} alt={imageAlt} />\n    </S.Container>\n  );\n}\n")))}m.isMDXComponent=!0}}]);